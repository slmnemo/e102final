% Written by Pierce Gruber and Kaitlin Lucio
clear

% Variable definitions

L = 0.5;
g = 9.8;
% Test variables
xex = [1;2;3;4];
uex = 1;

% Pole calculations

zetaCon = 1.5;
wCon = 1;
conPolynom = [1 2*zetaCon*wCon wCon^2];
conPoles = roots(conPolynom);
r_con_p = real(min(conPoles));
i_con_p = imag(min(conPoles));
conPoles = [conPoles', 15*r_con_p, 16*r_con_p];

zetaObs = 1;
wObs = 13.2;
obsPolynom = [1 2*zetaObs*wObs wObs^2];
obsPoles = roots(obsPolynom);
% sys = tf(wObs^2, obsPolynom);
% step(sys)

min_obs_pole = max(obsPoles);
r_obs_p = real(min_obs_pole);
i_obs_p = imag(min_obs_pole);
obsPoles = [obsPoles', 15*r_obs_p+15*i_obs_p,15*r_obs_p-15*i_obs_p];


% Define A, B, C, and D

A = [
    0, 1, 0, 0;
    g/L, 0, 0, 0;
    0, 0, 0, 1;
    0, 0, 0, 0
];

B = [0; -1/L; 0; 1];

C = [
    1, 0, 0, 0;
    0, 0, 1, 0
    ];

D = [
    0;
    0
    ];

[Mc, invMc] = testControllability(A, B);
[Mo, invMo] = testObservability(A, C);

% Calculate Observer and Controller using poles

K = place(A, B, conPoles);
Lo = place(A', C', obsPoles)';

% Calculate Ki for the system

Ki = 15*r_con_p;

% Simulate Simulink model

sim_run = sim("plant.mdl");
figure(1)
plot(sim_run.yout);

